admin:
  access_log_path: /tmp/admin_access.log
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }

static_resources:
  listeners:
  - name: tls_8443
    address:
      socket_address: { address: 0.0.0.0, port_value: 8443 }
    filter_chains:
    - transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          common_tls_context:
            tls_certificates:
            - certificate_chain: { filename: /certs/tls.crt }
              private_key:      { filename: /certs/tls.key }
      filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          codec_type: AUTO
          stat_prefix: ingress_https
          xff_num_trusted_hops: 2
          request_headers_to_add:
          - header: { key: "x-request-id", value: "%REQ(X-REQUEST-ID)%" }
          http_filters:
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              inline_code: |
                function envoy_on_request(handle)
                  local secret_path = "/run/secrets/edge-secret"
                  local file = io.open(secret_path, "r")
                  if file == nil then
                    handle:respond({[":status"] = "500"}, "edge secret missing")
                    return
                  end
                  local expected = file:read("*l")
                  file:close()
                  local got = handle:headers():get("x-edge-auth")
                  if got == nil or got ~= expected then
                    handle:respond({[":status"] = "403"}, "forbidden")
                    return
                  end
                end
          - name: envoy.filters.http.header_to_metadata
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.header_to_metadata.v3.Config
              request_rules:
              - header: X-Edge-Auth
                on_header_present: { metadata_namespace: envoy.lb, key: edge_auth, type: STRING }
                remove: false
          - name: envoy.filters.http.router
            typed_config: { "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router }
          route_config:
            name: local_routes
            virtual_hosts:
            - name: backend
              domains: ["*"]
              routes:
              - match: { prefix: "/.well-known/jwks.json" }
                route:
                  cluster: auth_api
                  timeout: 1s
              - match: { prefix: "/" }
                route:
                  cluster: auth_api
                  timeout: 15s
          request_headers_to_remove: ["x-envoy-downstream-service-cluster"]
          common_http_protocol_options:
            headers_with_underscores_action: REJECT_REQUEST
          max_request_headers_kb: 24
          max_request_bytes: 1048576
          stream_idle_timeout: 30s
          request_headers_timeout: 5s

  clusters:
  - name: auth_api
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    typed_extension_protocol_options:
      envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
        "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
        explicit_http_config:
          http2_protocol_options: {}
    load_assignment:
      cluster_name: auth_api
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address: { address: auth-api, port_value: 8080 }
    health_checks:
    - timeout: 1s
      interval: 5s
      unhealthy_threshold: 3
      healthy_threshold: 2
      http_health_check: { path: "/healthz" }
    outlier_detection:
      consecutive_5xx: 5
      interval: 5s
      base_ejection_time: 30s
      max_ejection_percent: 50


