name: 'Envoy Deployment'

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        type: choice
        options:
          - staging
          - production
        default: 'staging'

  # Automatic trigger on service changes
  push:
    branches: [ main ]
    paths:
      - 'Infrastructure/envoy/**'
      - '.github/workflows/envoy-release.yml'

env:
  SERVICE_NAME: 'envoy'
  
permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    name: 'Deploy Envoy'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ vars.APP_NAME }}-github-actions-codedeploy
        role-session-name: GitHubActions-CodeDeploy-${{ github.run_id }}
        aws-region: ${{ vars.AWS_REGION || 'us-west-1' }}

    - name: Generate Version Tag
      id: version
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
        COMMIT_SHA="${{ github.sha }}"
        SHORT_SHA=$(echo "$COMMIT_SHA" | cut -c1-8)
        VERSION="${{ env.SERVICE_NAME }}-${ENVIRONMENT}-${SHORT_SHA}"
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"

    - name: Create Deployment Package
      run: |
        SERVICE_NAME="${{ env.SERVICE_NAME }}"
        ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
        VERSION="${{ steps.version.outputs.version }}"
        
        # Create deployment package directory
        mkdir -p deployment-package
        
        # Copy and customize the AppSpec file
        cp Infrastructure/codedeploy/envoy/appspec.yml deployment-package/
        
        # Replace placeholders with actual values
        sed -i "s/{{ ENVIRONMENT }}/$ENVIRONMENT/g" deployment-package/appspec.yml
        sed -i "s/{{ SERVICE_NAME }}/$SERVICE_NAME/g" deployment-package/appspec.yml
        
        # Copy deployment scripts
        if [ -d "Infrastructure/codedeploy/envoy" ]; then
          cp -r Infrastructure/codedeploy/envoy/* deployment-package/
          
          DOMAIN="api.ultramotiontech.com"
          CERT_PREFIX=$(echo "$DOMAIN" | sed 's/\./-/g')
          cat > deployment-package/scripts/deployment.env << EOF

          SERVICE_NAME=$SERVICE_NAME
          ENVIRONMENT=$ENVIRONMENT
          VERSION=$VERSION
          STACK_NAME=$SERVICE_NAME
          STACK_FILE=configs/envoy.stack.release.yml
          DOMAIN=$DOMAIN
          CERT_PREFIX=$CERT_PREFIX
          CERT_DOMAIN=$DOMAIN
          SECRET_NAME=${{ vars.APP_NAME }}-secrets
          EOF
          
          echo "Created deployment-specific environment file"
        fi
        
        # Copy envoy configuration files to flat structure
        mkdir -p deployment-package/configs
        cp Infrastructure/envoy/prod/* deployment-package/configs/
        
        # Substitute environment variables in configuration files
        DOMAIN="api.ultramotiontech.com"
        CERT_PREFIX=$(echo "$DOMAIN" | sed 's/\./-/g')
        find deployment-package/configs -name "*.yaml" -type f -exec sed -i "s/\$DOMAIN/$DOMAIN/g" {} \;
        
        # Create deployment package
        tar -czf deployment-package.tar.gz -C deployment-package .
        
        echo "Deployment package created for envoy service"
        echo "Service: $SERVICE_NAME"
        echo "Environment: $ENVIRONMENT"
        echo "Version: $VERSION"

    - name: Upload to S3
      run: |
        SERVICE_NAME="${{ env.SERVICE_NAME }}"
        ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        
        # Upload deployment package to S3
        aws s3 cp deployment-package.tar.gz \
          s3://${{ secrets.DEPLOYMENT_BUCKET }}/deployments/${SERVICE_NAME}/${ENVIRONMENT}/deployment-${TIMESTAMP}.tar.gz
        
        echo "Deployment package uploaded to S3"

    - name: Create CodeDeploy Deployment
      id: codedeploy
      run: |
        SERVICE_NAME="${{ env.SERVICE_NAME }}"
        ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
        VERSION="${{ steps.version.outputs.version }}"
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        
        # Create CodeDeploy deployment
        DEPLOYMENT_ID=$(aws deploy create-deployment \
          --application-name "${SERVICE_NAME}-${ENVIRONMENT}" \
          --deployment-group-name "${SERVICE_NAME}-${ENVIRONMENT}-deployment-group" \
          --s3-location bucket=${{ secrets.DEPLOYMENT_BUCKET }},key=deployments/${SERVICE_NAME}/${ENVIRONMENT}/deployment-${TIMESTAMP}.tar.gz,bundleType=tgz \
          --description "Deployment of ${SERVICE_NAME} ${VERSION} to ${ENVIRONMENT}" \
          --query 'deploymentId' \
          --output text)
        
        echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
        echo "Created CodeDeploy deployment: $DEPLOYMENT_ID"

    - name: Wait for Deployment
      run: |
        DEPLOYMENT_ID="${{ steps.codedeploy.outputs.deployment_id }}"
        
        echo "Waiting for deployment $DEPLOYMENT_ID to complete..."
        
        # Wait for deployment to complete
        aws deploy wait deployment-successful --deployment-id $DEPLOYMENT_ID
        
        # Get deployment status
        DEPLOYMENT_STATUS=$(aws deploy get-deployment \
          --deployment-id $DEPLOYMENT_ID \
          --query 'deploymentInfo.status' \
          --output text)
        
        echo "Deployment completed with status: $DEPLOYMENT_STATUS"
        
        if [ "$DEPLOYMENT_STATUS" != "Succeeded" ]; then
          echo "Deployment failed with status: $DEPLOYMENT_STATUS"
          exit 1
        fi 