name: OpenTelemetry Collector Deployment

on:
  # ───── Manual trigger ─────
  workflow_dispatch:
    inputs:
      environment:
        description: Target environment
        required: true
        type: choice
        default: production
        options: [staging, production]

  # ───── Auto-trigger when otel-collector config or workflow changes ─────
  push:
    branches: [main]
    paths:
      - 'Infrastructure/otel-collector/**'
      - '.github/workflows/otel-collector-release.yml'

# ───── Global defaults ─────
permissions:
  contents: read            # checkout needs this
  id-token: write           # OIDC for aws-actions/configure-aws-credentials

env:
  SERVICE_NAME: otel-collector
  AWS_REGION: us-west-1      # overridden if repo/org variable AWS_REGION exists

jobs:
  deploy:
    name: Deploy OpenTelemetry Collector
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}

    defaults:
      run:
        shell: bash -euo pipefail {0}

    steps:
    # ───────────────────────────────
    - name: Checkout repository
      uses: actions/checkout@v4

    # ───────────────────────────────
    - name: Derive run-time variables
      id: vars
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"
        APP_NAME="${{ vars.APP_NAME }}"            # Org / repo variable
        SHORT_SHA="${GITHUB_SHA::8}"
        VERSION="${SHORT_SHA}"        # turn dots → dashes

        # Single timestamp for this workflow run (avoids mismatch between upload & deployment)
        TS="$(date +%Y%m%d-%H%M%S)"

        {
          echo "environment=$ENVIRONMENT"
          echo "version=$VERSION"
          echo "ts=$TS"
        } >>"$GITHUB_OUTPUT"

    # ───────────────────────────────
    - name: Configure AWS credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ vars.APP_NAME }}-github-actions-role-codedeploy
        role-session-name: gha-codedeploy-${{ github.run_id }}
        aws-region: ${{ vars.AWS_REGION || env.AWS_REGION }}

    # ───────────────────────────────
    - name: Build deployment package
      run: |
        # ========= Prep local vars =========
        ENVIRONMENT='${{ steps.vars.outputs.environment }}'
        VERSION='${{ steps.vars.outputs.version }}'
        APP_NAME='${{ vars.APP_NAME }}'
        SERVICE_NAME='${{ env.SERVICE_NAME }}'

        STACK_FILE='otel-collector.stack.yaml'

        # ========= Create staging area =========
        mkdir -p staging/scripts
        mkdir -p staging/configs
        cp Infrastructure/codedeploy/appspec.yml        staging/
        cp -r Infrastructure/codedeploy/scripts/*       staging/scripts/
        cp -r Infrastructure/otel-collector/*           staging/configs/

        # Render env.sh (envsubst keeps it POSIX-portable)
        export SERVICE_NAME ENVIRONMENT VERSION APP_NAME STACK_FILE \
               AWS_REGION="${{ vars.AWS_REGION || env.AWS_REGION }}" \
               REQUIRE_TLS=false
        envsubst < staging/scripts/env.sh > staging/scripts/env.sh.tmp
        mv staging/scripts/env.sh.tmp staging/scripts/env.sh
        chmod +x staging/scripts/env.sh

        # Template appspec.yml variables
        sed -i \
          -e "s|{{ ENVIRONMENT }}|$ENVIRONMENT|g" \
          -e "s|{{ SERVICE_NAME }}|$SERVICE_NAME|g" \
          staging/appspec.yml

        # ========= Copy & template otel-collector configs =========
        find staging/configs -type f \( -name '*.yml' -o -name '*.yaml' \) -exec sed -i \
          -e "s|\${AWS_REGION}|$AWS_REGION|g" \
          -e "s|\${VERSION}|$VERSION|g" \
          -e "s|\${ENVIRONMENT}|$ENVIRONMENT|g" {} +

        mv staging/configs/$STACK_FILE staging/

        tar -czf deployment-package.tar.gz -C staging .

    # ───────────────────────────────
    - name: Upload artefact to S3
      run: |
        aws s3 cp deployment-package.tar.gz \
          "s3://${{ secrets.DEPLOYMENT_BUCKET }}/deployments/${{ env.SERVICE_NAME }}/${{ steps.vars.outputs.environment }}/deployment-${{ steps.vars.outputs.ts }}.tar.gz"

    # ───────────────────────────────
    - name: Trigger CodeDeploy deployment
      id: deploy
      run: |
        DEPLOY_ID=$(aws deploy create-deployment \
          --application-name "${{ vars.APP_NAME }}-${{ env.SERVICE_NAME }}-${{ steps.vars.outputs.environment }}" \
          --deployment-group-name "${{ vars.APP_NAME }}-${{ env.SERVICE_NAME }}-${{ steps.vars.outputs.environment }}-deployment-group" \
          --s3-location bucket=${{ secrets.DEPLOYMENT_BUCKET }},key=deployments/${{ env.SERVICE_NAME }}/${{ steps.vars.outputs.environment }}/deployment-${{ steps.vars.outputs.ts }}.tar.gz,bundleType=tgz \
          --description "Deploy ${{ steps.vars.outputs.version }}" \
          --query deploymentId --output text)
        echo "id=$DEPLOY_ID" >>"$GITHUB_OUTPUT"

    # ───────────────────────────────
    - name: Wait for CodeDeploy to finish
      run: |
        aws deploy wait deployment-successful --deployment-id ${{ steps.deploy.outputs.id }}
        STATUS=$(aws deploy get-deployment --deployment-id ${{ steps.deploy.outputs.id }} --query 'deploymentInfo.status' --output text)
        echo "Deployment finished with status: $STATUS"
        [[ "$STATUS" == "Succeeded" ]] || exit 1 