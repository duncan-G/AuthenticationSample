name: Certbot Release

on:
  # ───── Manual trigger ─────
  workflow_dispatch:
    inputs:
      environment:
        description: Target environment
        required: true
        type: choice
        default: production
        options: [staging, production]

  # ───── Auto-trigger when certbot config or workflow changes (staging only) ─────
  push:
    branches: [main]
    paths:
      - 'Infrastructure/certbot/**'
      - '.github/workflows/certbot-release.yml'

# ───── Global defaults ─────
permissions:
  contents: read            # checkout needs this
  id-token: write           # OIDC for aws-actions/configure-aws-credentials

env:
  SERVICE_NAME: certbot
  AWS_REGION: us-west-1      # overridden if repo/org variable AWS_REGION exists

jobs:
  build-and-push:
    name: Deploy Certbot
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}

    defaults:
      run:
        shell: bash -euo pipefail {0}
    steps:
    # ───────────────────────────────
    - name: Checkout repository
      uses: actions/checkout@v4

    # ───────────────────────────────
    - name: Derive run-time variables
      id: vars
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
        APP_NAME="${{ vars.APP_NAME }}"            # Org / repo variable
        SHORT_SHA="${GITHUB_SHA::8}"
        VERSION="${SHORT_SHA}"
        ECR_REPO="${APP_NAME}/certbot"

        # Single timestamp for this workflow run
        TS="$(date +%Y%m%d-%H%M%S)"

        {
          echo "environment=$ENVIRONMENT"
          echo "app_name=$APP_NAME"
          echo "version=$VERSION"
          echo "ecr_repo=$ECR_REPO"
          echo "ts=$TS"
          echo "aws_region=${{ vars.AWS_REGION || env.AWS_REGION }}"
        } >>"$GITHUB_OUTPUT"

    # ───────────────────────────────
    - name: Configure AWS credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ vars.APP_NAME }}-github-actions-role-certbot
        role-session-name: gha-certbot-${{ steps.vars.outputs.environment }}-${{ github.run_id }}
        aws-region: ${{ steps.vars.outputs.aws_region }}

    # ───────────────────────────────
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    # ───────────────────────────────
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # ───────────────────────────────
    - name: Build and push Docker image
      run: |
        ENVIRONMENT="${{ steps.vars.outputs.environment }}"
        ECR_REPO="${{ steps.vars.outputs.ecr_repo }}"
        VERSION="${{ steps.vars.outputs.version }}"
        AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"
        AWS_REGION="${{ steps.vars.outputs.aws_region }}"
        
        FULL_ECR_REPO="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}"
        
        echo "Building and pushing certbot image for environment: $ENVIRONMENT"
        echo "ECR Repository: $FULL_ECR_REPO"
        
        # Build and push multi-platform image with manifest
        docker buildx build \
          --platform linux/arm64 \
          --push \
          --tag "$FULL_ECR_REPO:$VERSION" \
          --tag "$FULL_ECR_REPO:latest" \
          Infrastructure/certbot/
        
        echo "✅ Successfully built and pushed certbot image"
        
    # ───────────────────────────────
    - name: Deployment Summary
      run: |
        echo "## Certbot Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ steps.vars.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.vars.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **ECR Repository**: ${{ steps.vars.outputs.ecr_repo }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: ${{ steps.vars.outputs.ts }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Deployment completed successfully" >> $GITHUB_STEP_SUMMARY