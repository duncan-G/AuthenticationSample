name: Deploy Microservice

# ────────── Re‑usable workflow ──────────
on:
  workflow_call:
    inputs:
      service_name:
        description: Name of the microservice to deploy
        required: true
        type: string
      environment:
        description: Target environment (service‑staging / service‑production)
        required: true
        type: string
        default: service-production
      service_path:
        description: Path to the microservice directory
        required: true
        type: string
        default: ''
      image_name:
        description: Image name (repository component) to use
        required: true
        type: string
        default: ''
    secrets:
      AWS_ACCOUNT_ID:
        required: true
      DEPLOYMENT_BUCKET:
        required: true
      ECR_REPOSITORY:
        required: true       # <account>.dkr.ecr.<region>.amazonaws.com/<repo>

# ───── Global defaults ─────
permissions:
  contents: read
  id-token: write           # OIDC → aws-actions/configure-aws-credentials

env:
  AWS_REGION: us-west-1      # can be overridden by repo/org variable

jobs:
# ════════════════════════════════════════
  deploy:
    name: Deploy ${{ inputs.service_name }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    # Single deployment per svc/env → avoids latest‑tag races
    concurrency:
      group: deploy-${{ inputs.service_name }}-${{ inputs.environment }}
      cancel-in-progress: false

    defaults:
      run:
        shell: bash -euo pipefail {0}

    steps:
    # ───────────────────────────────
    - name: Checkout repository
      uses: actions/checkout@v4

    # ───────────────────────────────
    - name: Derive run‑time variables
      id: vars
      run: |
        SERVICE_NAME="${{ inputs.service_name }}"
        ENVIRONMENT="${{ inputs.environment }}"
        APP_NAME="${{ vars.APP_NAME }}"

        if [ -z "$APP_NAME" ]; then
          echo "::error ::Org/Repo variable APP_NAME is not set"
          exit 1
        fi

        SHORT_SHA="${GITHUB_SHA::8}"
        VERSION="$SHORT_SHA"
        BUILD_TAG="${SHORT_SHA}"

        # ----- ECR -----
        ECR_REPOSITORY="${{ secrets.ECR_REPOSITORY }}"   # full repo URI
        IMAGE_URI="${ECR_REPOSITORY}:${BUILD_TAG}"

        TS="$(date +%Y%m%d-%H%M%S)"

        {
          echo "service_name=$SERVICE_NAME"
          echo "environment=$ENVIRONMENT"
          echo "app_name=$APP_NAME"
          echo "version=$VERSION"
          echo "build_tag=$BUILD_TAG"
          echo "ecr_repository=$ECR_REPOSITORY"
          echo "image_uri=$IMAGE_URI"
          echo "ts=$TS"
          echo "aws_region=${{ vars.AWS_REGION || env.AWS_REGION }}"
        } >>"$GITHUB_OUTPUT"

    # ───────────────────────────────
    - name: Configure AWS credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ vars.APP_NAME }}-github-actions-role-codedeploy
        role-session-name: gha-codedeploy-${{ github.run_id }}
        aws-region: ${{ vars.AWS_REGION || env.AWS_REGION }}

    # ───────────────────────────────
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    # (Needed for cross‑arch container publish)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # ───────────────────────────────
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    # ───────────────────────────────
    - name: Build & push container
      run: |
        ECR_REPOSITORY='${{ steps.vars.outputs.ecr_repository }}'
        BUILD_TAG='${{ steps.vars.outputs.build_tag }}'
        IMAGE_URI="$ECR_REPOSITORY:$BUILD_TAG"

        echo "Building image $IMAGE_URI"

        cd "${{ inputs.service_path }}"

        # Build container image (no push) – repo only, tag via ContainerImageTag
        env \
          ContainerRepository="$ECR_REPOSITORY" \
          ContainerImageTag="$BUILD_TAG" \
          dotnet publish --os linux --arch arm64 -p:PublishProfile=DefaultContainer

        # Push immutable tag
        docker push "$IMAGE_URI"

        # Optionally (race‑prone) update latest tag
        docker tag "$IMAGE_URI" "$ECR_REPOSITORY:latest"
        docker push "$ECR_REPOSITORY:latest"

    # ───────────────────────────────
    - name: Build deployment package
      run: |
        SERVICE_NAME='${{ steps.vars.outputs.service_name }}'
        ENVIRONMENT='${{ steps.vars.outputs.environment }}'
        IMAGE_URI='${{ steps.vars.outputs.image_uri }}'
        APP_NAME='${{ steps.vars.outputs.app_name }}'
        VERSION='${{ steps.vars.outputs.version }}'

        STACK_FILE='service.stack.release.yaml'
        
        # Certificate prefix for internal subdomain
        DOMAIN='${{ vars.DOMAIN_NAME }}'
        CERT_PREFIX="internal.${DOMAIN}"
        CERT_PREFIX="${CERT_PREFIX//./-}"          # turn dots → dashes

        mkdir -p staging/scripts
        cp Infrastructure/codedeploy/appspec.yml  staging/
        cp -r Infrastructure/codedeploy/scripts/* staging/scripts/

        # Copy the stack file to staging and replace variables
        cp Microservices/.builds/$STACK_FILE staging/

        # Render env.sh and stack file with runtime values
        export SERVICE_NAME ENVIRONMENT IMAGE_URI APP_NAME VERSION \
               AWS_REGION="${{ vars.AWS_REGION || env.AWS_REGION }}" \
               REQUIRE_TLS=true STACK_FILE SECRET_NAME="${APP_NAME}-secrets" \
               CERT_PREFIX
        
        # Replace variables in env.sh
        envsubst < staging/scripts/env.sh > staging/scripts/env.sh.tmp
        mv staging/scripts/env.sh.tmp staging/scripts/env.sh
        chmod +x staging/scripts/env.sh
        
        # Replace variables in stack file
        envsubst < staging/$STACK_FILE > staging/$STACK_FILE.tmp
        mv staging/$STACK_FILE.tmp staging/$STACK_FILE

        tar -czf deployment-package.tar.gz -C staging .

    # ───────────────────────────────
    - name: Upload artefact to S3
      run: |
        aws s3 cp deployment-package.tar.gz \
          "s3://${{ secrets.DEPLOYMENT_BUCKET }}/deployments/${{ steps.vars.outputs.service_name }}/${{ steps.vars.outputs.environment }}/deployment-${{ steps.vars.outputs.ts }}.tar.gz"

    # ───────────────────────────────
    - name: Trigger CodeDeploy deployment
      id: deploy
      run: |
        SERVICE_NAME='${{ steps.vars.outputs.service_name }}'
        ENVIRONMENT='${{ steps.vars.outputs.environment }}'
        APP_NAME='${{ steps.vars.outputs.app_name }}'
        IMAGE_URI='${{ steps.vars.outputs.image_uri }}'
        TS='${{ steps.vars.outputs.ts }}'

        DEPLOY_ID=$(aws deploy create-deployment \
          --application-name "${APP_NAME}-${SERVICE_NAME}-${ENVIRONMENT}" \
          --deployment-group-name "${APP_NAME}-${SERVICE_NAME}-${ENVIRONMENT}-deployment-group" \
          --s3-location bucket=${{ secrets.DEPLOYMENT_BUCKET }},key=deployments/${SERVICE_NAME}/${ENVIRONMENT}/deployment-${TS}.tar.gz,bundleType=tgz \
          --description "Deploy ${SERVICE_NAME} ${IMAGE_URI} to ${ENVIRONMENT}" \
          --query deploymentId --output text)
        echo "id=$DEPLOY_ID" >>"$GITHUB_OUTPUT"

    # ───────────────────────────────
    - name: Wait for CodeDeploy to finish
      run: |
        aws deploy wait deployment-successful --deployment-id ${{ steps.deploy.outputs.id }}
        STATUS=$(aws deploy get-deployment --deployment-id ${{ steps.deploy.outputs.id }} --query 'deploymentInfo.status' --output text)
        echo "Deployment finished with status: $STATUS"
        [[ "$STATUS" == "Succeeded" ]]

    # ───────────────────────────────
    - name: Generate deployment summary
      if: always()
      run: |
        echo "## Microservice Deployment Summary"            >> $GITHUB_STEP_SUMMARY
        echo "- **Service**:      ${{ steps.vars.outputs.service_name }}"  >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**:  ${{ steps.vars.outputs.environment }}"  >> $GITHUB_STEP_SUMMARY
        echo "- **Image**:        ${{ steps.vars.outputs.image_uri }}"   >> $GITHUB_STEP_SUMMARY
        echo "- **Build Tag**:    ${{ steps.vars.outputs.build_tag }}"   >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment ID**: ${{ steps.deploy.outputs.id }}"       >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**:      ${{ github.event_name }}"              >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**:       ${{ github.sha }}"                     >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**:    $(date -u '+%Y-%m-%d %H:%M:%S UTC')"   >> $GITHUB_STEP_SUMMARY

        if [ "${{ job.status }}" == "success" ]; then
          echo "- **Status**: ✅ Deployment successful" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status**: ❌ Deployment failed"     >> $GITHUB_STEP_SUMMARY
