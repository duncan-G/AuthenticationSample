# Main Envoy proxy configuration file
# This configures the proxy to handle both HTTP/1.1, HTTP/2 and HTTP/3 traffic

admin:
  access_log_path: /tmp/admin_access.log
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }

node:
  id: front-proxy
  cluster: front-proxy-cluster

dynamic_resources:
  cds_config:
    path_config_source:
      path: /etc/envoy/discovery/envoy.cds.yaml

static_resources:
  listeners:
  - name: http_listener
    address:
      socket_address: { address: 0.0.0.0, port_value: 443 }
    filter_chains:
      filters:
        - name: envoy.filters.network.http_connection_manager
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
            codec_type: auto
            stat_prefix: ingress_http
            rds:
              config_source:
                path_config_source:
                  path: /etc/envoy/discovery/envoy.rds.yaml
              route_config_name: service_routes
            http_filters:
              - name: envoy.filters.http.grpc_web
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
              - name: envoy.filters.http.cors
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
            access_log:
            - name: envoy.access_loggers.open_telemetry
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.access_loggers.open_telemetry.v3.OpenTelemetryAccessLogConfig
                common_config:
                  grpc_service:
                    envoy_grpc:
                      cluster_name: opentelemetry_collector
                    timeout: 0.5s
                  log_name: "ReverseProxy"
                body:
                  string_value: |
                    [%START_TIME%] %REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%
                    -> %RESPONSE_CODE% flags=%RESPONSE_FLAGS%
                    detail=%RESPONSE_CODE_DETAILS%
                    transport=%UPSTREAM_TRANSPORT_FAILURE_REASON%
                attributes:
                  values:
                    - key: "upstream_cluster"
                      value: { string_value: "%UPSTREAM_CLUSTER%" }
                resource_attributes:
                  values:
                    - key: "service.name"
                      value: { string_value: "ReverseProxy" }
                    - key: "service.instance.id"
                      value: { string_value: "ReverseProxy" }
            tracing:
              provider:
                name: envoy.tracers.opentelemetry
                typed_config:
                  "@type": type.googleapis.com/envoy.config.trace.v3.OpenTelemetryConfig
                  service_name: "ReverseProxy"
                  grpc_service:
                    envoy_grpc:
                      cluster_name: "opentelemetry_collector"
                    timeout: 0.5s
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          common_tls_context:
            alpn_protocols: ["h2", "http/1.1"]
            tls_certificate_sds_secret_configs:
            - name: tls_sds
              sds_config:
                path_config_source: { path: /etc/envoy/discovery/envoy.sds.yaml }

  - name: quic_listener
    address:
      socket_address: { protocol: UDP, address: 0.0.0.0, port_value: 443 }
    udp_listener_config:
      quic_options: {}
    filter_chains:
      filters:
        - name: envoy.filters.network.http_connection_manager
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
            codec_type: HTTP3
            stat_prefix: ingress_http_3
            rds:
              config_source:
                path_config_source:
                  path: /etc/envoy/discovery/envoy.rds.yaml
              route_config_name: service_routes
            http_filters:
              - name: envoy.filters.http.grpc_web
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
              - name: envoy.filters.http.cors
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
            access_log:
            - name: envoy.access_loggers.open_telemetry
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.access_loggers.open_telemetry.v3.OpenTelemetryAccessLogConfig
                common_config:
                  grpc_service:
                    envoy_grpc:
                      cluster_name: opentelemetry_collector
                    timeout: 0.5s
                  log_name: "ReverseProxy"
                body:
                  string_value: |
                    [%START_TIME%] %REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%
                    -> %RESPONSE_CODE% flags=%RESPONSE_FLAGS%
                    detail=%RESPONSE_CODE_DETAILS%
                    transport=%UPSTREAM_TRANSPORT_FAILURE_REASON%
                attributes:
                  values:
                    - key: "upstream_cluster"
                      value: { string_value: "%UPSTREAM_CLUSTER%" }
                resource_attributes:
                  values:
                    - key: "service.name"
                      value: { string_value: "ReverseProxy" }
                    - key: "service.instance.id"
                      value: { string_value: "ReverseProxy" }
            tracing:
              provider:
                name: envoy.tracers.opentelemetry
                typed_config:
                  "@type": type.googleapis.com/envoy.config.trace.v3.OpenTelemetryConfig
                  service_name: "ReverseProxy"
                  grpc_service:
                    envoy_grpc:
                      cluster_name: "opentelemetry_collector"
                    timeout: 0.5s
      transport_socket:
        name: envoy.transport_sockets.quic
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.quic.v3.QuicDownstreamTransport
          downstream_tls_context:
            common_tls_context:
              alpn_protocols: ["h3"]
              tls_certificate_sds_secret_configs:
              - name: tls_sds
                sds_config:
                  path_config_source: { path: /etc/envoy/discovery/envoy.sds.yaml }

  - name: aspire_dashboard_listener
    address:
      socket_address: { address: 0.0.0.0, port_value: 20000 }
    filter_chains:
      filters:
        - name: envoy.filters.network.http_connection_manager
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
            codec_type: http1
            stat_prefix: ingress_http
            route_config:
              name: aspire_dashboard_http_config
              virtual_hosts:
              - name: aspire_dashboard_service
                domains: ["*"]
                routes:
                - match: { prefix: "/" }
                  route: { cluster: aspire_dashboard_cluster, timeout: 0s }
            http_filters:
            - name: envoy.filters.http.router
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  - name: pg_admin_listener
    address:
      socket_address: { address: 0.0.0.0, port_value: 20001 }
    filter_chains:
      filters:
        - name: envoy.filters.network.http_connection_manager
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
            codec_type: http1
            stat_prefix: ingress_http
            route_config:
              name: pg_admin_http_config
              virtual_hosts:
              - name: pg_admin_service
                domains: ["*"]
                routes:
                - match: { prefix: "/" }
                  route: { cluster: pg_admin_cluster }
            http_filters:
            - name: envoy.filters.http.router
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  clusters:
    - name: aspire_dashboard_cluster
      type: strict_dns
      lb_policy: round_robin
      load_assignment:
        cluster_name: aspire_dashboard_cluster
        endpoints:
        - lb_endpoints:
          - endpoint:
              address: { socket_address: { address: aspire_app, port_value: 18888 } }
    - name: pg_admin_cluster
      type: strict_dns
      lb_policy: round_robin
      load_assignment:
        cluster_name: pg_admin_cluster
        endpoints:
        - lb_endpoints:
          - endpoint:
              address: { socket_address: { address: postgres_pgadmin, port_value: 80 } }
    - name: opentelemetry_collector
      type: strict_dns
      typed_extension_protocol_options:
        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
          "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
          explicit_http_config:
            http2_protocol_options: { }
      lb_policy: round_robin
      load_assignment:
        cluster_name: opentelemetry_collector
        endpoints:
        - lb_endpoints:
          - endpoint:
              address: { socket_address: { address: aspire_app, port_value: 18889 } }